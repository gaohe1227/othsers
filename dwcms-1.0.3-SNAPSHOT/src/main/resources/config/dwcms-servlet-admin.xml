<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:rop="http://www.bookegou.com/schema/rop" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.bookegou.com/schema/rop
			http://www.bookegou.com/schema/rop/rop-1.0.xsd">
	<!-- 开启@Aspect注解功能  AOP采用此方式代理,是不可以面向接口编程的,也就是说要代理的类不可以实现接口
	<aop:aspectj-autoproxy proxy-target-class="true" />
	-->
	<!-- AOP代理可实现接口 -->
	<aop:aspectj-autoproxy />
	<!-- 隐式地向 Spring 容器注册 -->
	<context:annotation-config />
	<!--启动Rop框架扫描 -->  
    <rop:annotation-driven sign-enable="true"/> 	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      <property name="locations">  
           <list>  
              <value>classpath:/config/jdbc.properties</value>
         </list>  
      </property>  
   </bean> 
	<!-- 数据库连接池配置采用dbcp的模式 -->		
	<bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource" >
        <property name="driverClassName">
            <value>${jdbc.driver}</value>
        </property>
        <property name="url" >
            <value>${jdbc.url}</value>
        </property>
        <property name="username" >
            <value>${jdbc.username}</value>
        </property>
        <property name="password" >
        	<value>${jdbc.password}</value>
        </property>
        <property name="maxActive"> 
           <value>${dbcp.maxActive}</value> 
        </property> 
        <property name="maxIdle"> 
           <value>${dbcp.maxIdle}</value> 
        </property> 
        <property name="maxWait"> 
           <value>${dbcp.maxWait}</value> 
        </property> 
		<property name="validationQuery">
           <value>select count(1) from Dual</value>
        </property>
        <!-- test when get connection -->
        <property name="testOnBorrow">
           <value>true</value>
        </property>
        <!-- test when return connection to pool -->
        <property name="testOnReturn">
           <value>true</value>
        </property>
        <property name="testWhileIdle">
           <value>true</value>
        </property>
    </bean>
    <!-- spring扫描注解 -->
    <context:component-scan base-package="com.doadway"/>
    
    <!-- 引入email_config 发送配置-->
	<import  resource="classpath:/config/email_context.xml"/>
    <!-- 引入ehcache_context 缓存配置-->
	<import  resource="classpath:/config/ehcache_context.xml"/>
    <!-- 引入shiro_context 验证授权配置-->
	<import  resource="classpath:/config/shiro_context.xml"/>
	
     <!-- 配置视图 -->
     <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/dwcms_sys/"
          p:suffix=".jsp" 
          p:order="1"/>
	<!-- 由spring管理mybatis的事物-->
    <tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>	
	
    <!--定义一个事物通知txAdvice，配置事物的传播特性-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
        	<!--所有以find开头的业务逻辑方法均不需要事物控制且只读-->
            <tx:method name="find*" propagation="NOT_SUPPORTED" read-only="true"/>
            <!--设置所有方法均进行事物控制，如果当前没有事物，则新建一个事物-->
            <tx:method name="*" propagation="REQUIRES_NEW" rollback-for="Exception"/> 
        </tx:attributes>
    </tx:advice>
    <!--基于AOP技术的事物管理实现-->
    <aop:config>
    <!--定义一个事务切入点，拦截com.doadway.*.biz.impl包中所有类的所有方法-->
        <aop:pointcut id="transactionPointcut" expression="execution(* com.doadway.*.biz.impl.*(..))"/>
        <!--引用txAdvice事务通知-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut"/>
    </aop:config>	
    
  	<!-- 创建SqlSessionFactory，同时指定数据源
  	-->   
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">    
	     <property name="dataSource" ref="dataSource" /> 
	     <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
     </bean>    
     <!-- 指定mybatis 的SqlSession -->
     <bean id="sqlSession"   class="org.mybatis.spring.SqlSessionTemplate">   
          <constructor-arg index="0" ref="sqlSessionFactory" />   
     </bean>
	<!-- 文件上传插件 -->
	<bean id="multipartResolver" 
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 
			p:defaultEncoding="utf-8" >
		<property name="maxUploadSize">  
	        <value>52428800</value>  
	    </property>  
		<property name="maxInMemorySize">  
		    <value>2048</value>  
		</property> 
	</bean>            
	<!-- 用mybatis扫描注解机制自动生成DAOImpl -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.doadway" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>
	
    <!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射)
    <mvc:view-controller path="/" view-name="forward:/login.jsp"/>  
     -->  
  
    <!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->  
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->  
    <!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来
    <mvc:resources mapping="/js/**" location="/resources/js/"/>  
    <mvc:resources mapping="/css/**" location="/resources/css/"/>  
    <mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/"/>  
     -->  
	
</beans>